#include "./push_swap.h"
/*#include <stdio.h>
#include <stdlib.h>
# include <stdarg.h>
# include <unistd.h>
# include <limits.h>
# include <stdbool.h>

typedef struct s_stack_node
{
    int value;
    struct s_stack_node *next;
    struct s_stack_node *prev;
}               t_stack_node;
*/

static void ft_r_rotate(t_stack_node **head)
{
    t_stack_node *first;
    t_stack_node *last;

    if (!head || !(*head) || !(*head)->next)
        return;

    first = *head;
    last = *head;

    while (last->next)
        last = last->next;

    *head = first->next;
    first->next->prev = NULL;
    last->next = first;
    first->prev = last;
    first->next = NULL;
}
void ft_rra(t_stack_node **a)
{
     ft_r_rotate(a);
}

void ft_rrb(t_stack_node **b)
{
    ft_r_rotate(b);
}

void ft_rrr(t_stack_node **a, t_stack_node **b)
{
    ft_r_rotate(a);
    ft_r_rotate(b);
}
/*
t_stack_node *ft_create_node(int value)
{
    t_stack_node *new_node = malloc(sizeof(t_stack_node));
    if (!new_node)
        return NULL;
    new_node->value = value;
    new_node->next = NULL;
    new_node->prev = NULL;
    return new_node;
}

void ft_push(t_stack_node **head, int value)
{
    t_stack_node *new_node = ft_create_node(value);
    if (!new_node)
        return;
    if (*head)
    {
        new_node->next = *head;
        (*head)->prev = new_node;
    }
    *head = new_node;
}

void ft_print_stack(t_stack_node *head)
{
    while (head)
    {
        printf("%d ", head->value);
        head = head->next;
    }
    printf("\n");
}

int main(int argc, char **argv)
{
    t_stack_node *a = NULL;

    // Check if there are enough arguments (the first argument is the program name)
    if (argc < 2)
    {
        printf("Usage: %s [list of integers]\n", argv[0]);
        return 1;
    }

    // Push each command-line argument onto the stack
    for (int i = 1; i < argc; i++)
    {
        int value = atoi(argv[i]);
        ft_push(&a, value);
    }

    // Print stack before rotation
    printf("Stack before rotation: ");
    ft_print_stack(a);

    // Rotate the stack
    ft_rotate(&a);

    // Print stack after rotation
    printf("Stack after rotation: ");
    ft_print_stack(a);

    return 0;
}
*/